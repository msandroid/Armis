import { ClientSession, stdioClient } from '@modelcontextprotocol/sdk';
import { DynamicTool } from '@langchain/core/tools';
import { BaseChatModel } from '@langchain/core/language_models/chat_models';
import { ChatOpenAI } from '@langchain/openai';
import { ChatOllama } from '@langchain/community/chat_models/ollama';
import { AgentExecutor, createReactAgent } from 'langchain/agents';
import { PromptTemplate } from '@langchain/core/prompts';

/**
 * Playwright MCP„Çµ„Éº„Éê„Éº„ÅÆË®≠ÂÆö
 */
export interface PlaywrightMCPConfig {
  command?: string;
  args?: string[];
  baseUrl?: string;
  headless?: boolean;
  browser?: 'chromium' | 'firefox' | 'webkit';
  viewport?: { width: number; height: number };
  timeout?: number;
}

/**
 * Playwright MCP„Ç¢„ÉÄ„Éó„Çø„Éº
 */
export class PlaywrightMCPAdapter {
  private session: ClientSession | null = null;
  private config: PlaywrightMCPConfig;

  constructor(config: PlaywrightMCPConfig = {}) {
    this.config = {
      command: 'npx',
      args: ['@playwright/mcp'],
      headless: true,
      browser: 'chromium',
      viewport: { width: 1280, height: 720 },
      timeout: 30000,
      ...config
    };
  }

  /**
   * Playwright MCP„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö
   */
  async connect(): Promise<void> {
    try {
      console.log('üîå Connecting to Playwright MCP server...');
      
      const { read, write } = await stdioClient(
        this.config.command!,
        this.config.args!
      );
      
      this.session = new ClientSession(read, write);
      await this.session.initialize();
      
      console.log('‚úÖ Playwright MCP session initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to connect to Playwright MCP server:', error);
      throw error;
    }
  }

  /**
   * Âà©Áî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´„ÇíÂèñÂæó
   */
  async getAvailableTools(): Promise<string[]> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    const tools = await this.session.listTools();
    return tools.tools.map(tool => tool.name);
  }

  /**
   * Playwright MCP„ÉÑ„Éº„É´„ÇíLangChain„ÉÑ„Éº„É´„Å´Â§âÊèõ
   */
  async convertPlaywrightToolsToLangChain(): Promise<DynamicTool[]> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    const tools = await this.session.listTools();
    const langchainTools: DynamicTool[] = [];

    for (const tool of tools.tools) {
      console.log('Converting Playwright tool:', tool.name, tool.description);
      
      const langchainTool = new DynamicTool({
        name: tool.name,
        description: tool.description || '',
        func: async (input: any) => {
          if (!this.session) {
            throw new Error('Playwright MCP session not available');
          }

          try {
            const result = await this.session.callTool(tool.name, input);
            return result.content?.[0]?.text || JSON.stringify(result);
          } catch (error) {
            console.error(`Error calling Playwright tool ${tool.name}:`, error);
            throw error;
          }
        },
      });

      console.log('Created LangChain tool:', langchainTool.name, langchainTool.description);
      langchainTools.push(langchainTool);
    }

    return langchainTools;
  }

  /**
   * „Éñ„É©„Ç¶„Ç∂„ÇíËµ∑Âãï
   */
  async launchBrowser(): Promise<void> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      // „Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÁ¢∫Ë™ç
      await this.session.callTool('browser_install', {});
      console.log('‚úÖ Browser installed/verified');
    } catch (error) {
      console.log('‚ö†Ô∏è Browser installation check failed, continuing...');
    }
  }

  /**
   * URL„Å´„Éä„Éì„Ç≤„Éº„Éà
   */
  async navigateToUrl(url: string): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_navigate', { url });
      console.log(`‚úÖ Navigated to ${url}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to navigate to ${url}:`, error);
      throw error;
    }
  }

  /**
   * „Éö„Éº„Ç∏„ÅÆ„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÇíÂèñÂæó
   */
  async takeSnapshot(): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_snapshot', {});
      console.log('‚úÖ Page snapshot taken');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to take snapshot:', error);
      throw error;
    }
  }

  /**
   * „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆÂΩ±
   */
  async takeScreenshot(options: {
    filename?: string;
    fullPage?: boolean;
    type?: 'png' | 'jpeg';
  } = {}): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_take_screenshot', {
        filename: options.filename || `screenshot-${Date.now()}.png`,
        fullPage: options.fullPage || false,
        type: options.type || 'png'
      });
      console.log('‚úÖ Screenshot taken');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to take screenshot:', error);
      throw error;
    }
  }

  /**
   * Ë¶ÅÁ¥†„Çí„ÇØ„É™„ÉÉ„ÇØ
   */
  async clickElement(element: string, ref: string): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_click', {
        element,
        ref
      });
      console.log(`‚úÖ Clicked element: ${element}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to click element ${element}:`, error);
      throw error;
    }
  }

  /**
   * „ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ
   */
  async typeText(element: string, ref: string, text: string, options: {
    submit?: boolean;
    slowly?: boolean;
  } = {}): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_type', {
        element,
        ref,
        text,
        submit: options.submit || false,
        slowly: options.slowly || false
      });
      console.log(`‚úÖ Typed text into element: ${element}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to type text into element ${element}:`, error);
      throw error;
    }
  }

  /**
   * „Ç≠„Éº„ÇíÊäº„Åô
   */
  async pressKey(key: string): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_press_key', { key });
      console.log(`‚úÖ Pressed key: ${key}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to press key ${key}:`, error);
      throw error;
    }
  }

  /**
   * „ÉÜ„Ç≠„Çπ„Éà„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
   */
  async waitForText(text: string): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_wait_for', { text });
      console.log(`‚úÖ Waited for text: ${text}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to wait for text ${text}:`, error);
      throw error;
    }
  }

  /**
   * JavaScript„ÇíÂÆüË°å
   */
  async evaluateJavaScript(code: string, element?: string, ref?: string): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const params: any = { function: code };
      if (element && ref) {
        params.element = element;
        params.ref = ref;
      }

      const result = await this.session.callTool('browser_evaluate', params);
      console.log('‚úÖ JavaScript evaluated');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to evaluate JavaScript:', error);
      throw error;
    }
  }

  /**
   * „Éï„Ç©„Éº„É†„ÇíÂÖ•Âäõ
   */
  async fillForm(fields: Array<{
    element: string;
    ref: string;
    value: string;
  }>): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_fill_form', { fields });
      console.log('‚úÖ Form filled');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to fill form:', error);
      throw error;
    }
  }

  /**
   * „Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
   */
  async uploadFiles(filePaths: string[]): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_file_upload', { paths: filePaths });
      console.log('‚úÖ Files uploaded');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to upload files:', error);
      throw error;
    }
  }

  /**
   * „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂèñÂæó
   */
  async getNetworkRequests(): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const result = await this.session.callTool('browser_network_requests', {});
      console.log('‚úÖ Network requests retrieved');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to get network requests:', error);
      throw error;
    }
  }

  /**
   * „Çø„Éñ„ÇíÁÆ°ÁêÜ
   */
  async manageTabs(action: 'list' | 'create' | 'close' | 'select', index?: number): Promise<any> {
    if (!this.session) {
      throw new Error('Playwright MCP session not initialized');
    }

    try {
      const params: any = { action };
      if (index !== undefined) {
        params.index = index;
      }

      const result = await this.session.callTool('browser_tabs', params);
      console.log(`‚úÖ Tab action completed: ${action}`);
      return result;
    } catch (error) {
      console.error(`‚ùå Failed to manage tabs (${action}):`, error);
      throw error;
    }
  }

  /**
   * Playwright MCP„ÉÑ„Éº„É´„Çí‰ΩøÁî®„Åô„ÇãReact„Ç®„Éº„Ç∏„Çß„É≥„Éà„Çí‰ΩúÊàê
   */
  async createReactAgentWithPlaywrightTools(
    llmConfig: any = { type: 'openai', modelName: 'gpt-3.5-turbo' }
  ): Promise<AgentExecutor> {
    const tools = await this.convertPlaywrightToolsToLangChain();
    
    // LLM„É¢„Éá„É´„ÇíÂèñÂæó„Åæ„Åü„ÅØ‰ΩúÊàê
    let model: BaseChatModel;
    
    if (llmConfig.type === 'ollama') {
      model = new ChatOllama({
        model: llmConfig.modelName || 'gemma3:1b',
        baseUrl: llmConfig.baseUrl || 'http://localhost:11434',
        temperature: llmConfig.temperature || 0.1
      });
    } else {
      model = new ChatOpenAI({
        modelName: llmConfig.modelName || 'gpt-3.5-turbo',
        openAIApiKey: llmConfig.apiKey,
        temperature: llmConfig.temperature || 0
      });
    }
    
    const prompt = PromptTemplate.fromTemplate(`
You are a helpful AI assistant with access to browser automation tools through Playwright MCP.
You can use these tools to interact with web pages, navigate, click elements, fill forms, and more.

Available tools:
{tools}

Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question

Question: {input}
Thought: {agent_scratchpad}
`);

    const agent = await createReactAgent({
      llm: model,
      tools,
      prompt,
    });

    return new AgentExecutor({
      agent,
      tools,
      verbose: true,
    });
  }

  /**
   * „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñâ„Åò„Çã
   */
  async close(): Promise<void> {
    if (this.session) {
      await this.session.close();
      this.session = null;
      console.log('üîå Playwright MCP session closed');
    }
  }
}
